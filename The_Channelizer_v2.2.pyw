import json
import os
import sys
import csv
import shutil
import base64
import io
import gzip
import xml.etree.ElementTree as ET

from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional, Tuple
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, simpledialog

APP_NAME = "The Channelizer"
APP_VERSION = "2.2"

# PLACEHOLDER_PNG_B64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/x8AAwMCAO6bH8QAAAAASUVORK5CYII="
# ICON_PNG_B64 = PLACEHOLDER_PNG_B64
# ABOUT_ICON_B64 = PLACEHOLDER_PNG_B64
# SPLASH_LOGO_B64 = PLACEHOLDER_PNG_B64

ABOUT_ICON_B64 = ( "")
SPLASH_LOGO_B64 = ("")
ICON_PNG_B64 = ("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")
CHECKED_PNG = ("iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAARklEQVQokWP8z0AQRgYGhlEwCkYgYGBg8GfB/0cYGBiQJQYJgkB0g0gGgqAQzQfg0kCwEwC4kQyECwQxgYBgMDAz8AAAkQyS1i9kOngAAAABJRU5ErkJggg==")
UNCHECKED_PNG = ("iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAQklEQVQokWP8z0AQRgYGhlEwCkYgYGBg8GfB/0cYGBiQJQYJgkB0g0gGgqAQzQfg0kCwEwC4kQyECwQxgYBgMDAD4CAFqQJr4k0O8yAAAAAElFTkSuQmCC")



SATELLITES_XML_GZ_B64: str = ""
# ---------------- Helpers ----------------

def show_splash(root: tk.Tk, b64_data: str, duration_ms: int = 2000):
    splash = tk.Toplevel(root)
    splash.overrideredirect(True)
    splash.attributes("-topmost", True)

    try:
        img = tk.PhotoImage(data=b64_data, format="png")
    except Exception as e:
        print("Splash image load failed:", e)
        return None

    lbl = tk.Label(splash, image=img, borderwidth=0)
    lbl.image = img
    lbl.pack()

    splash.update_idletasks()
    sw, sh = splash.winfo_screenwidth(), splash.winfo_screenheight()
    w, h = img.width(), img.height()
    x, y = (sw - w) // 2, (sh - h) // 2
    splash.geometry(f"{w}x{h}+{x}+{y}")

    # Close after duration (safe guard in case it’s already gone)
    def _close():
        if splash.winfo_exists():
            splash.destroy()
    splash.after(duration_ms, _close)

    return splash

def center_window(win: tk.Tk, w: int = 1200, h: int = 760) -> None:
    win.update_idletasks()
    sw = win.winfo_screenwidth()
    sh = win.winfo_screenheight()
    x = (sw - w) // 2
    y = (sh - h) // 2
    win.geometry(f"{w}x{h}+{x}+{y}")

def confirm(win, title, message) -> bool:
    return messagebox.askyesno(title, message, parent=win)

def _pol_letter_to_code(pol: str) -> int:
    """
    Inverse of _map_polarization: 'H','V','L','R' -> 0..3
    Unknown -> 0
    """
    p = (pol or "").upper()
    return {"H": 0, "V": 1, "L": 2, "R": 3}.get(p, 0)

def _video_type_to_codec_code(vtype: str) -> int:
    """
    Map our VideoType string to SDX uiSet.uiBit.VideoCodec numeric code.
    MPEG2=1, H264=2, H265=3, AVS2=4, Other/unknown=0
    """
    t = (vtype or "").upper()
    if t == "MPEG2": return 1
    if t == "H264":  return 2
    if t == "H265":  return 3
    if t == "AVS2":  return 4
    return 0


# --------------- Data Model / Parser ---------------
@dataclass
class ChlData:
    meta: Dict[str, Any] = field(default_factory=dict)
    satellites: List[Dict[str, Any]] = field(default_factory=list)
    transponders: List[Dict[str, Any]] = field(default_factory=list)
    favorites: List[Dict[str, Any]] = field(default_factory=list)
    channels: List[Dict[str, Any]] = field(default_factory=list)

    _sat_by_index: Dict[int, Dict[str, Any]] = field(default_factory=dict, init=False, repr=False)
    _tp_by_index: Dict[int, Dict[str, Any]] = field(default_factory=dict, init=False, repr=False)

    def rebuild_indexes(self) -> None:
        self._sat_by_index = {s.get("Index", i): s for i, s in enumerate(self.satellites)}
        self._tp_by_index = {t.get("Index", i): t for i, t in enumerate(self.transponders)}

    def sat_name_for_tpindex(self, tp_index: int) -> str:
        tp = self._tp_by_index.get(tp_index)
        if not tp: return "—"
        sat = self._sat_by_index.get(tp.get("SatIndex", -1))
        return sat.get("Name", "—") if sat else "—"

    def tp_label(self, tp_index: int) -> str:
        tp = self._tp_by_index.get(tp_index)
        if not tp: return "—"
        return f"{tp.get('Freq','')} {tp.get('Pol','')} {tp.get('SR','')}"

    def ensure_counts_and_indices(self) -> None:
        for i, s in enumerate(self.satellites):
            s["Index"] = i; s["Type"] = "sat"
        for i, t in enumerate(self.transponders):
            t["Index"] = i; t["Type"] = "tp"
        for i, c in enumerate(self.channels):
            c["Index"] = i; c["Type"] = "ch"
        for i, f in enumerate(self.favorites):
            f["Index"] = i; f["Type"] = "fav"
            f.setdefault("TVChs", []); f.setdefault("RadioChs", [])

        tv = sum(1 for c in self.channels if c.get("TVType") == "TV")
        rd = sum(1 for c in self.channels if c.get("TVType") == "Radio")
        self.meta["Type"] = "index"
        self.meta["ChTV"] = tv
        self.meta["CHRadio"] = rd
        self.meta["FAV"] = len(self.favorites)
        self.meta["Sat"] = len(self.satellites)
        self.meta["TP"] = len(self.transponders)
        self.meta.setdefault("Ver", 1)

        self.rebuild_indexes()

    def delete_channel_and_fix_favs(self, ch_index: int) -> None:
        if not (0 <= ch_index < len(self.channels)): return
        for fav in self.favorites:
            fav["TVChs"] = [i - 1 if i > ch_index else i for i in fav.get("TVChs", []) if i != ch_index]
            fav["RadioChs"] = [i - 1 if i > ch_index else i for i in fav.get("RadioChs", []) if i != ch_index]
        del self.channels[ch_index]
        self.ensure_counts_and_indices()

    def reorder_channels(self, indices: List[int], direction: int) -> None:
        if not indices or direction not in (-1, 1): return
        indices = sorted(set(indices))
        if direction == -1 and indices[0] == 0: return
        if direction == 1 and indices[-1] == len(self.channels) - 1: return

        new_order = list(range(len(self.channels)))
        if direction == -1:
            for i in indices:
                new_order[i-1], new_order[i] = new_order[i], new_order[i-1]
        else:
            for i in reversed(indices):
                new_order[i], new_order[i+1] = new_order[i+1], new_order[i]

        new_channels = [None] * len(self.channels)
        inv_map = {}
        for new_pos, old_pos in enumerate(new_order):
            new_channels[new_pos] = self.channels[old_pos]
            inv_map[old_pos] = new_pos
        self.channels = new_channels

        for fav in self.favorites:
            fav["TVChs"] = [inv_map.get(i, i) for i in fav.get("TVChs", [])]
            fav["RadioChs"] = [inv_map.get(i, i) for i in fav.get("RadioChs", [])]

        self.ensure_counts_and_indices()

def parse_chl_file(filepath: str) -> ChlData:
    """
    Read a .chl file that is a stream of consecutive JSON objects:
    index, sat*, tp*, fav*, ch* (order may vary). The parser is robust to stray
    bytes, NULs, and partial garbage between objects.

    Favorites may store channel references either as integers (direct channel
    indices) or as strings "<TPIndex>-<SID>". We normalize both to integer
    channel indices using the channels present in the file.

    Returns a ChlData with indices/counts rebuilt.
    """
    # --- read & pre-clean ---
    with open(filepath, "rb") as f:
        # Ignore undecodable bytes; strip NULs if present
        text = f.read().decode("utf-8", errors="ignore").replace("\x00", "")

    # --- extract objects one-by-one, robustly ---
    dec = json.JSONDecoder()
    objs: List[Dict[str, Any]] = []
    i = 0
    n = len(text)

    while i < n:
        # skip whitespace
        while i < n and text[i].isspace():
            i += 1
        if i >= n:
            break
        try:
            obj, idx = dec.raw_decode(text, i)
            if isinstance(obj, dict):
                objs.append(obj)
            i = idx
        except Exception:
            # Harden: skip forward to the next plausible JSON object start
            nxt = text.find("{", i + 1)
            if nxt == -1:
                break
            i = nxt

    # --- helper: normalize 'Type' string ---
    def otype(o: Dict[str, Any]) -> str:
        t = o.get("Type")
        return t.lower() if isinstance(t, str) else ""

    # --- partition objects by Type (case-insensitive) ---
    meta         = next((o for o in objs if otype(o) == "index"), None)
    satellites   = [o for o in objs if otype(o) == "sat"]
    transponders = [o for o in objs if otype(o) == "tp"]
    favorites    = [o for o in objs if otype(o) == "fav"]
    channels     = [o for o in objs if otype(o) == "ch"]

    # --- build data model ---
    data = ChlData(
        meta=meta or {"Type": "index", "Ver": 1},
        satellites=satellites,
        transponders=transponders,
        favorites=favorites,
        channels=channels,
    )

    # Ensure indices/counts/types before we resolve favorites
    data.ensure_counts_and_indices()

    # --- Build fast lookup: (TPIndex, SID) -> global channel index ---
    by_tp_sid: Dict[tuple, int] = {}
    for ch in data.channels:
        tp = ch.get("TPIndex")
        sid = ch.get("SID")
        idx = ch.get("Index")
        if tp is None or sid is None or idx is None:
            continue
        try:
            by_tp_sid[(int(tp), int(sid))] = int(idx)
        except Exception:
            pass  # leave unmapped if not clean integers

    # --- Normalize a favorite channel list into integer indices ---
    def _normalize_fav_list(raw_list: Optional[List[Any]]) -> List[int]:
        if not raw_list:
            return []

        out: List[int] = []
        seen = set()

        for raw in raw_list:
            cand_idx: Optional[int] = None

            if isinstance(raw, int):
                # treat as direct channel index if in range
                if 0 <= raw < len(data.channels):
                    cand_idx = raw

            elif isinstance(raw, str):
                s = raw.strip()
                # accept "<TPIndex>-<SID>" (any surrounding spaces)
                if "-" in s:
                    a, b = s.split("-", 1)
                    try:
                        key = (int(a.strip()), int(b.strip()))
                        cand_idx = by_tp_sid.get(key)
                    except ValueError:
                        cand_idx = None
                else:
                    # If someone wrote a plain integer as string, accept it
                    try:
                        v = int(s)
                        if 0 <= v < len(data.channels):
                            cand_idx = v
                    except ValueError:
                        cand_idx = None

            # dedupe while preserving order
            if cand_idx is not None and 0 <= cand_idx < len(data.channels):
                if cand_idx not in seen:
                    seen.add(cand_idx)
                    out.append(cand_idx)

        return out

    # --- Apply normalization to every favorite group ---
    for fav in data.favorites:
        fav["TVChs"] = _normalize_fav_list(fav.get("TVChs"))
        fav["RadioChs"] = _normalize_fav_list(fav.get("RadioChs"))

    # Recompute counts/indices again (safe no-op if unchanged)
    data.ensure_counts_and_indices()
    return data

def write_chl_file(filepath: str, data: ChlData) -> None:
    # Always normalize counts/indices first
    data.ensure_counts_and_indices()

    # Serialize favorites using the file's logic: "<TPIndex>-<SID>"
    favs_serialized = []
    for f in data.favorites:
        def _to_tp_sid_list(index_list):
            out = []
            for i in index_list or []:
                if not (0 <= i < len(data.channels)):
                    continue
                ch = data.channels[i]
                tp = ch.get("TPIndex")
                sid = ch.get("SID")
                if tp is None or sid is None:
                    continue
                out.append(f"{int(tp)}-{int(sid)}")
            # keep order stable; remove duplicates
            seen = set()
            uniq = []
            for s in out:
                if s not in seen:
                    seen.add(s)
                    uniq.append(s)
            return uniq

        favs_serialized.append({
            "Index": f.get("Index", 0),
            "Name": f.get("Name", ""),
            "RadioChs": _to_tp_sid_list(f.get("RadioChs")),
            "TVChs": _to_tp_sid_list(f.get("TVChs")),
            "Type": "fav",
        })

    # Build flat JSON stream just like original files (index, then sat/tp/fav/ch)
    parts = []
    parts.append(json.dumps(data.meta, separators=(",", ":"), ensure_ascii=False))
    for s in data.satellites:
        parts.append(json.dumps(s, separators=(",", ":"), ensure_ascii=False))
    for t in data.transponders:
        parts.append(json.dumps(t, separators=(",", ":"), ensure_ascii=False))
    for f in favs_serialized:
        parts.append(json.dumps(f, separators=(",", ":"), ensure_ascii=False))
    for c in data.channels:
        parts.append(json.dumps(c, separators=(",", ":"), ensure_ascii=False))

    blob = "".join(parts)

    # Make a backup if the file exists
    if os.path.exists(filepath):
        shutil.copyfile(filepath, filepath + ".bak")

    with open(filepath, "w", encoding="utf-8", newline="") as f:
        f.write(blob)

def write_satellites_xml_file(filepath: str, data: ChlData) -> None:
    """
    Export only satellites + transponders to a satellites.xml file.
    Uses numeric polarization codes 0..3 (common in many satellites.xml variants).
    """
    import xml.etree.ElementTree as ET

    data.ensure_counts_and_indices()

    root = ET.Element("satellites")
    # Group TPs by satellite
    tp_by_sat = {}
    for t in data.transponders:
        tp_by_sat.setdefault(t.get("SatIndex", -1), []).append(t)

    for s in data.satellites:
        sat_el = ET.SubElement(root, "sat")
        sat_el.set("name", str(s.get("Name", "")))
        # Optional extras if you have them
        if s.get("Angle", "") != "":
            sat_el.set("position", str(s.get("Angle")))  # some tools use 'position'
        if s.get("Band", "") != "":
            sat_el.set("band", str(s.get("Band")))

        for t in sorted(tp_by_sat.get(s.get("Index", -1), []), key=lambda x: (x.get("Freq", 0), x.get("SR", 0))):
            tp_el = ET.SubElement(sat_el, "transponder")
            tp_el.set("frequency", str(t.get("Freq", 0)))
            tp_el.set("symbol_rate", str(t.get("SR", 0)))
            tp_el.set("polarization", str(_pol_letter_to_code(t.get("Pol", "H"))))
            # Keep optional fields if you want
            if t.get("FEC", "") != "":
                tp_el.set("fec_inner", str(t.get("FEC")))
            if t.get("plsNumber", 0):
                tp_el.set("plsNumber", str(t.get("plsNumber", 0)))
            if t.get("msIsid", 0):
                tp_el.set("is_id", str(t.get("msIsid", 0)))
            if t.get("msTp", 0):
                tp_el.set("multistream", str(t.get("msTp", 0)))

    # Write pretty-ish (no external deps)
    tree = ET.ElementTree(root)
    ET.indent(tree, space="  ", level=0)  # Py3.9+
    if os.path.exists(filepath):
        shutil.copyfile(filepath, filepath + ".bak")
    tree.write(filepath, encoding="utf-8", xml_declaration=True)

def write_sdx_file(filepath: str, data: ChlData) -> None:
    """
    Export current dataset to a GTMedia-like .sdx JSON-object stream:
      {"satellite_object_0": {...}}
      {"transponder_object_0": {...}}
      {"program_tv_object_0": {...}} / {"program_radio_object_0": {...}}
    This is a minimal, interoperable structure that round-trips with parse_sdx_file().
    """
    data.ensure_counts_and_indices()

    # Build a stable TP old->new->old mapping (SDX uses stFlag.TPIndex and program stProgNo.unShort.sHi16)
    # We will encode the CURRENT TP index as the 'old' ID to keep linkage stable.
    tp_old_ids = [t.get("Index", i) for i, t in enumerate(data.transponders)]
    # Guarantee uniqueness & order
    tp_old_ids = sorted(set(tp_old_ids), key=lambda x: x)
    new_from_old = {old: i for i, old in enumerate(tp_old_ids)}
    old_from_new = {i: old for i, old in enumerate(tp_old_ids)}

    parts: List[str] = []

    # Satellites
    for si, s in enumerate(data.satellites):
        obj = {
            "SatName": s.get("Name", ""),
            "SatAngle": s.get("Angle", ""),
            "Band": s.get("Band", ""),
        }
        parts.append(json.dumps({f"satellite_object_{si}": obj}, ensure_ascii=False, separators=(",", ":")))

    # Transponders
    for new_idx, t in enumerate(sorted(data.transponders, key=lambda x: x.get("Index", 0))):
        old_tp_id = old_from_new.get(new_idx, new_idx)
        stFlag = {
            "POL": _pol_letter_to_code(t.get("Pol", "H")),
            "SatIndex": int(t.get("SatIndex", 0) or 0),
            "TPIndex": int(old_tp_id),  # keep linkage ID
        }
        obj = {
            "Freq": int(t.get("Freq", 0) or 0),
            "SR": int(t.get("SR", 0) or 0),
            "FEC": t.get("FEC", ""),
            "plsNumber": t.get("plsNumber", 0),
            "msIsid": t.get("msIsid", 0),
            "msTp": t.get("msTp", 0),
            "stFlag": stFlag,
        }
        parts.append(json.dumps({f"transponder_object_{new_idx}": obj}, ensure_ascii=False, separators=(",", ":")))

    # Programs
    tv_counter = 0
    radio_counter = 0
    for ch in data.channels:
        vcodec = _video_type_to_codec_code(ch.get("VideoType", ""))
        uiBit = {
            "Lock": 1 if ch.get("Lock", 0) else 0,
            "Skip": 1 if ch.get("Skip", 0) else 0,
            "Hide": 1 if ch.get("Hide", 0) else 0,
            "VideoCodec": vcodec,
        }
        uiSet = { "uiBit": uiBit }

        tp_new = int(ch.get("TPIndex", 0) or 0)
        # We must encode the 'old' ID in sHi16
        tp_old_for_prog = old_from_new.get(tp_new, tp_new)

        stProgNo = {
            "unShort": {
                "sHi16": int(tp_old_for_prog),
                "sLo16": int(ch.get("SID", 0) or 0),
            }
        }

        obj = {
            "ServiceName": ch.get("Name", ""),
            "VideoPID": int(ch.get("VideoPID", 0) or 0),
            "PCRPID": int(ch.get("PcrPID", 0) or 0),
            "PMTPID": int(ch.get("PmtPID", 0) or 0),
            "TTXPID": int(ch.get("TTXPID", 0) or 0),
            "stProgNo": stProgNo,
            "uiSet": uiSet,
        }

        if (ch.get("TVType") or "TV").upper() == "TV":
            parts.append(json.dumps({f"program_tv_object_{tv_counter}": obj}, ensure_ascii=False, separators=(",", ":")))
            tv_counter += 1
        else:
            parts.append(json.dumps({f"program_radio_object_{radio_counter}": obj}, ensure_ascii=False, separators=(",", ":")))
            radio_counter += 1

    blob = "\n".join(parts)

    if os.path.exists(filepath):
        shutil.copyfile(filepath, filepath + ".bak")
    with open(filepath, "w", encoding="utf-8", newline="") as f:
        f.write(blob)

def _get_embedded_satellites_xml_bytes() -> Optional[bytes]:
    """
    Return decompressed bytes of the embedded satellites.xml if present, else None.
    """
    s = (SATELLITES_XML_GZ_B64 or "").strip()
    if not s:
        return None
    try:
        raw = base64.b64decode(s)
        return gzip.decompress(raw)
    except Exception:
        return None

def make_gz_b64_from_file(xml_path: str) -> str:
    """
    Produce a gzip+base64 string from a satellites.xml file.
    Copy the returned string into SATELLITES_XML_GZ_B64.
    """
    with open(xml_path, "rb") as f:
        data = f.read()
    return base64.b64encode(gzip.compress(data, compresslevel=9)).decode("ascii")

def _map_polarization(code: str) -> str:
    """
    Map polarization from satellites.xml → 'H','V','L','R'.
    Common mapping: 0=H, 1=V, 2=L, 3=R. Unknown → '?'.
    """
    try:
        n = int(code)
    except Exception:
        return "?"
    return {0: "H", 1: "V", 2: "L", 3: "R"}.get(n, "?")

def _parse_satellites_xml_bytes(xml_bytes: bytes) -> Tuple[List[Dict[str, Any]], List[Dict[str, Any]]]:
    """
    Parse satellites.xml bytes into (satellites, transponders) lists compatible with ChlData.
      sat dict: {"Type":"sat","Index":i,"Name":str}
      tp  dict: {"Type":"tp","Index":j,"SatIndex":i,"Freq":int,"Pol":'H|V|L|R',"SR":int}
    """
    root = ET.fromstring(xml_bytes)
    sats: List[Dict[str, Any]] = []
    tps:  List[Dict[str, Any]] = []

    # Typical structure: <satellites> <sat name="..."> <transponder frequency="..." symbol_rate="..." polarization="..."/>
    for si, sat_el in enumerate(root.findall(".//sat")):
        name = sat_el.get("name", "").strip()
        sats.append({"Type": "sat", "Index": si, "Name": name})

        for tp_el in sat_el.findall("./transponder"):
            freq = tp_el.get("frequency", "0")
            sr   = tp_el.get("symbol_rate", "0")
            pol  = tp_el.get("polarization", "0")
            try:
                freq_i = int(freq)
            except Exception:
                freq_i = 0
            try:
                sr_i = int(sr)
            except Exception:
                sr_i = 0
            tps.append({
                "Type": "tp",
                "Index": len(tps),
                "SatIndex": si,
                "Freq": freq_i,
                "Pol": _map_polarization(pol),
                "SR": sr_i,
            })
    return sats, tps

def parse_satellites_xml_file(xml_path: str) -> "ChlData":
    """
    Load external satellites.xml into a ChlData (sats+tps only; channels/favorites empty).
    """
    with open(xml_path, "rb") as f:
        xml_bytes = f.read()
    sats, tps = _parse_satellites_xml_bytes(xml_bytes)
    data = ChlData(
        meta={"Type": "index", "Ver": 1, "ChTV": 0, "CHRadio": 0, "FAV": 0, "Sat": len(sats), "TP": len(tps)},
        satellites=sats, transponders=tps, favorites=[], channels=[]
    )
    data.ensure_counts_and_indices()
    return data

def parse_satellites_xml_embedded() -> Optional["ChlData"]:
    """
    Load embedded satellites.xml (gzip+base64 in SATELLITES_XML_GZ_B64).
    Returns ChlData or None if no embedded data present.
    """
    xml_bytes = _get_embedded_satellites_xml_bytes()
    if not xml_bytes:
        return None
    sats, tps = _parse_satellites_xml_bytes(xml_bytes)
    data = ChlData(
        meta={"Type": "index", "Ver": 1, "ChTV": 0, "CHRadio": 0, "FAV": 0, "Sat": len(sats), "TP": len(tps)},
        satellites=sats, transponders=tps, favorites=[], channels=[]
    )
    data.ensure_counts_and_indices()
    return data

def parse_sdx_file(filepath: str) -> ChlData:
    """
    Load a GTMedia-style .sdx file composed of many concatenated JSON objects like:
      {"satellite_object_0": {...}}
      {"transponder_object_0": {...}}
      {"program_tv_object_0": {...}}
      {"program_radio_object_...": {...}}
    We convert it into ChlData (sat/tp/ch). Favorites are not parsed here.
    """
    # --- read whole text ---
    with open(filepath, "rb") as f:
        text = f.read().decode("utf-8", errors="ignore")

    # --- split into objects robustly (same strategy as parse_chl_file) ---
    dec = json.JSONDecoder()
    raw_objs: List[Dict[str, Any]] = []
    i = 0
    n = len(text)
    while i < n:
        while i < n and text[i].isspace():
            i += 1
        if i >= n:
            break
        try:
            obj, idx = dec.raw_decode(text, i)
            if isinstance(obj, dict):
                raw_objs.append(obj)
            i = idx
        except Exception:
            nxt = text.find("{", i + 1)
            if nxt == -1:
                break
            i = nxt

    # --- flatten into typed buckets ---
    sat_vals: List[Dict[str, Any]] = []   # raw satellites from SDX
    tp_vals: List[Dict[str, Any]]  = []   # raw tps from SDX
    prog_vals: List[Tuple[str, Dict[str, Any]]] = []  # (kind, dict) where kind in {"TV","Radio"}

    for o in raw_objs:
        # each o has a single key like "satellite_object_0"
        for key, val in o.items():
            if key.startswith("satellite_object_"):
                sat_vals.append(val)
            elif key.startswith("transponder_object_"):
                tp_vals.append(val)
            elif key.startswith("program_tv_object_"):
                prog_vals.append(("TV", val))
            elif key.startswith("program_radio_object_"):
                prog_vals.append(("Radio", val))

    # --- convert to our standard structures ---
    satellites: List[Dict[str, Any]] = []
    transponders: List[Dict[str, Any]] = []
    channels: List[Dict[str, Any]] = []

    # Satellites
    for si, s in enumerate(sat_vals):
        satellites.append({
            "Type": "sat",
            "Index": si,
            "Name": s.get("SatName", "").strip(),
            "Angle": s.get("SatAngle", ""),  # keep if present
            "Band": s.get("Band", ""),       # may not exist
        })

    # Transponders
    # SDX transponder carries: Freq, SR, stFlag:{POL(0=H,1=V,2=L,3=R), SatIndex, TPIndex, ...}
    # We'll respect the provided TPIndex if present; else assign sequential.
    tp_index_override_to_pos: Dict[int, int] = {}
    for pos, t in enumerate(tp_vals):
        stf = t.get("stFlag", {})
        tp_idx = stf.get("TPIndex", pos)
        pol_code = stf.get("POL", 0)  # 0=H,1=V,2=L,3=R
        pol = _map_polarization(str(pol_code))
        si = stf.get("SatIndex", 0)
        transponders.append({
            "Type": "tp",
            "Index": tp_idx,
            "SatIndex": si,
            "Freq": int(t.get("Freq", 0) or 0),
            "Pol": pol,
            "SR": int(t.get("SR", 0) or 0),
            "FEC": t.get("FEC", ""),        # optional, keep if present
            "plsNumber": t.get("plsNumber", 0),
            "msIsid": t.get("msIsid", 0),
            "msTp": t.get("msTp", 0),
        })
        tp_index_override_to_pos[tp_idx] = pos

    # Normalize TP indices to 0..N-1 without losing original mapping
    # Build a stable remap so our UI/tree stays consistent.
    if transponders:
        sorted_unique = sorted({t["Index"] for t in transponders})
        remap = {old: new for new, old in enumerate(sorted_unique)}
        for t in transponders:
            t["Index"] = remap.get(t["Index"], t["Index"])
        # Also need reverse map to translate program TPIndex later
        tp_old_to_new = remap
    else:
        tp_old_to_new = {}

    # Programs -> Channels
    # From observation:
    #   - Name: ServiceName
    #   - SID: stProgNo.unShort.sLo16
    #   - TPIndex: stProgNo.unShort.sHi16   (maps to TPIndex in transponder stFlag)
    #   - PIDs: VideoPID, PCRPID, PMTPID, TTXPID
    #   - Flags: uiSet.uiBit: Lock, Skip, Hide, CA, HD, VideoCodec
    #   - TSID/ONID exist but not used directly
    def _video_codec_to_str(code: Optional[int]) -> str:
        try:
            c = int(code)
        except Exception:
            return "Other"
        return {1: "MPEG2", 2: "H264", 3: "H265", 4: "AVS2"}.get(c, "Other")

    for idx, (kind, p) in enumerate(prog_vals):
        bits = ((p.get("uiSet") or {}).get("uiBit") or {})
        name = p.get("ServiceName", "") or ""
        sid = ((p.get("stProgNo") or {}).get("unShort") or {}).get("sLo16", 0)
        tp_old = ((p.get("stProgNo") or {}).get("unShort") or {}).get("sHi16", 0)
        tp_new = tp_old_to_new.get(tp_old, 0)

        channels.append({
            "Type": "ch",
            "Index": idx,
            "Name": name,
            "Provider": "",  # SDX doesn't provide a clean provider; leave blank
            "TVType": "TV" if kind == "TV" else "Radio",
            "VideoType": _video_codec_to_str(bits.get("VideoCodec", None)),
            "VideoPID": int(p.get("VideoPID", 0) or 0),
            "PcrPID": int(p.get("PCRPID", 0) or 0),
            "PmtPID": int(p.get("PMTPID", 0) or 0),
            "SID": int(sid or 0),
            "TTXPID": int(p.get("TTXPID", 0) or 0),
            "TPIndex": int(tp_new),
            "Lock": 1 if bits.get("Lock", 0) else 0,
            "Skip": 1 if bits.get("Skip", 0) else 0,
            "Hide": 1 if bits.get("Hide", 0) else 0,
        })

    # Sort transponders by their (normalized) Index to ensure contiguous ordering
    transponders.sort(key=lambda t: t.get("Index", 0))

    # Build the model
    data = ChlData(
        meta={"Type": "index", "Ver": 1},
        satellites=satellites,
        transponders=transponders,
        favorites=[],   # SDX favorites are bitmasks & lists; not mapped (yet)
        channels=channels,
    )
    data.ensure_counts_and_indices()
    return data

# --------------- Dialogs ---------------
class FavoritePicker(tk.Toplevel):
    """Modal dialog to pick a favorite group from a list."""

    def __init__(self, master, favorites):
        super().__init__(master)
        self.title("Choose Favorite Group")
        self.resizable(True, True)
        self.transient(master)
        self.grab_set()
        self.result = None

        wrap = ttk.Frame(self, padding=10)
        wrap.pack(fill="both", expand=True)

        ttk.Label(wrap, text="Pick a favorite group:").pack(anchor="w", pady=(0, 6))

        list_frame = ttk.Frame(wrap)
        list_frame.pack(fill="both", expand=True)

        self.lst = tk.Listbox(list_frame, exportselection=False)
        vsb = ttk.Scrollbar(list_frame, orient="vertical", command=self.lst.yview)
        self.lst.configure(yscrollcommand=vsb.set)
        self.lst.grid(row=0, column=0, sticky="nsew")
        vsb.grid(row=0, column=1, sticky="ns")
        list_frame.grid_rowconfigure(0, weight=1)
        list_frame.grid_columnconfigure(0, weight=1)

        for fav in favorites:
            i = fav.get("Index", 0)
            name = fav.get("Name", "")
            tvc = len(fav.get("TVChs", []))
            rdc = len(fav.get("RadioChs", []))
            self.lst.insert("end", f"[{i}] {name}  —  TV:{tvc}  Radio:{rdc}")

        btns = ttk.Frame(wrap)
        btns.pack(fill="x", pady=(8, 0))
        ttk.Button(btns, text="OK", command=self._on_ok).pack(side="left")
        ttk.Button(btns, text="Cancel", command=self._on_cancel).pack(side="right")

        self.lst.bind("<Double-1>", lambda e: self._on_ok())
        self.bind("<Return>", lambda e: self._on_ok())
        self.bind("<Escape>", lambda e: self._on_cancel())

        self.lst.focus_set()
        self._autosize()
        self._center_over(master)

    def _autosize(self):
        """Auto-size the listbox to content (up to a cap)."""
        self.update_idletasks()

        # width based on longest line
        max_chars = max((len(self.lst.get(i)) for i in range(self.lst.size())), default=30)
        width = min(max_chars + 4, 80)  # cap width at ~80 chars
        self.lst.config(width=width)

        # height based on number of groups
        height = min(self.lst.size(), 20)  # cap height at 20 rows
        self.lst.config(height=height if height > 0 else 1)

        self.update_idletasks()

    def _center_over(self, master):
        self.update_idletasks()
        mw = master.winfo_rootx()
        mh = master.winfo_rooty()
        mw2 = mw + master.winfo_width() // 2
        mh2 = mh + master.winfo_height() // 2
        w = self.winfo_width()
        h = self.winfo_height()
        self.geometry(f"+{mw2 - w//2}+{mh2 - h//2}")

    def _on_ok(self):
        sel = self.lst.curselection()
        if not sel:
            self.result = None
        else:
            text = self.lst.get(sel[0])  # "[3] Name — TV:x Radio:y"
            try:
                idx_str = text.split("]", 1)[0].lstrip("[")
                self.result = int(idx_str)
            except Exception:
                self.result = None
        self.destroy()

    def _on_cancel(self):
        self.result = None
        self.destroy()

# --------------- Main Application ---------------
class ChlApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title(f"{APP_NAME} v{APP_VERSION}")
        self.minsize(1000, 600)
        center_window(self, 1200, 760)

        # Safe icon
        try:
            self._icon = tk.PhotoImage(data=ICON_PNG_B64, format="png")
            self.iconphoto(False, self._icon)
        except Exception:
            pass

        self.filepath: Optional[str] = None
        self.file_format: str = "chl"  # 'chl' | 'sdx' | 'xml' – decides how Save writes
        self.data: Optional[ChlData] = None
        self.filtered_indices: List[int] = []

        # checkbox state (indices)
        self.checked = set()

        # 🔧 Build UI (these accidentally got nested in your helper before)
        self._build_menu()
        self._build_main()

        sample = "/mnt/data/User Data.chl"
        if os.path.exists(sample):
            try:
                self.load_file(sample)
            except Exception:
                pass

#--------------- Helpers - Commands ---------------
    def _popup_menu(self, menu: tk.Menu, event, listbox: tk.Listbox):
        row = listbox.nearest(event.y)
        if row is not None:
            if row not in listbox.curselection():
                listbox.selection_clear(0, "end")
                listbox.selection_set(row)
        try:
            menu.tk_popup(event.x_root, event.y_root)
        finally:
            menu.grab_release()

    def _current_fav_index(self) -> Optional[int]:
        sel = self.lst_fav.curselection()
        if not sel:
            return None
        line = self.lst_fav.get(sel[0])
        try:
            return int(line.split(":", 1)[0])
        except Exception:
            return sel[0]

    def _fav_lists(self, fav):
        # always return references to the lists (not copies)
        return fav.setdefault("TVChs", []), fav.setdefault("RadioChs", [])

    def _fav_selected_indices(self, which: str) -> List[int]:
        fav_i = self._current_fav_index()
        if fav_i is None or not self.data:
            return []
        fav = self.data.favorites[fav_i]
        tv_list, rd_list = self._fav_lists(fav)
        lb = self.lst_fav_tv if which == "TV" else self.lst_fav_radio
        pos = list(lb.curselection())
        source = tv_list if which == "TV" else rd_list
        return [source[p] for p in pos]

    def _fav_remove_selected(self, which: str):
        fav_i = self._current_fav_index()
        if fav_i is None or not self.data:
            return
        fav = self.data.favorites[fav_i]
        tv_list, rd_list = self._fav_lists(fav)
        lb = self.lst_fav_tv if which == "TV" else self.lst_fav_radio
        positions = sorted(list(lb.curselection()))
        if not positions:
            messagebox.showinfo("Nothing selected", "Select one or more items.", parent=self); return
        source = tv_list if which == "TV" else rd_list
        for p in reversed(positions):
            if 0 <= p < len(source):
                del source[p]
        self.refresh_fav_members()

    def _fav_move_selected(self, which: str, direction: int):
        fav_i = self._current_fav_index()
        if fav_i is None or not self.data:
            return
        fav = self.data.favorites[fav_i]
        tv_list, rd_list = self._fav_lists(fav)
        lb = self.lst_fav_tv if which == "TV" else self.lst_fav_radio
        source = tv_list if which == "TV" else rd_list
        sel = list(lb.curselection())
        if not sel:
            messagebox.showinfo("No selection", "Select one or more items.", parent=self); return

        # boundary checks
        if direction < 0 and sel[0] == 0: return
        if direction > 0 and sel[-1] == len(source) - 1: return

        # move block while preserving internal order
        block = [source[i] for i in sel]
        for i in reversed(sel):
            del source[i]
        insert_at = sel[0] + direction
        for v in reversed(block):
            source.insert(insert_at, v)

        self.refresh_fav_members()
        # restore selection in new positions
        new_sel = range(insert_at, insert_at + len(block))
        lb.selection_clear(0, "end")
        for i in new_sel:
            lb.selection_set(i)
        lb.see(insert_at)

    def _move_selected_btn(self):
        """Top-bar 'Move Selected…' button.
        If selection exists in TV members → move those.
        Else if selection exists in Radio members → move those.
        Else prompt the user.
        """
        # Prefer TV selection when both have some (rare).
        tv_sel = list(self.lst_fav_tv.curselection()) if hasattr(self, "lst_fav_tv") else []
        rd_sel = list(self.lst_fav_radio.curselection()) if hasattr(self, "lst_fav_radio") else []

        if tv_sel:
            self._fav_add_or_move_to_group("TV", move=True)
        elif rd_sel:
            self._fav_add_or_move_to_group("Radio", move=True)
        else:
            messagebox.showinfo("No selection",
                                "Select one or more items in TV Members or Radio Members, then click 'Move Selected…'.",
                                parent=self)

    def _fav_add_or_move_to_group(self, which: str, move: bool):
        if not self.data:
            return
        src_fav_i = self._current_fav_index()
        if src_fav_i is None:
            return
        src_fav = self.data.favorites[src_fav_i]
        tv_list, rd_list = self._fav_lists(src_fav)
        lb = self.lst_fav_tv if which == "TV" else self.lst_fav_radio
        sel_positions = list(lb.curselection())
        if not sel_positions:
            messagebox.showinfo("No selection", "Select one or more items.", parent=self); return

        # choose destination
        dst_i = self._pick_favorite_group()
        if dst_i is None:
            return
        dst_fav = self.data.favorites[dst_i]
        dst_tv, dst_rd = self._fav_lists(dst_fav)

        src = tv_list if which == "TV" else rd_list
        dst = dst_tv if which == "TV" else dst_rd

        # add unique while preserving order
        moved = 0
        items = [src[p] for p in sel_positions]
        for ch_index in items:
            if ch_index not in dst:
                dst.append(ch_index)
                moved += 1
        if move:
            for p in reversed(sel_positions):
                del src[p]

        self.refresh_fav_members()
        self.status.set(f"{'Moved' if move else 'Added'} {moved} {which} channel(s) to '{dst_fav.get('Name','')}'.")

    def delete_selected_channels(self):
        if not self.data:
            return
        sel = sorted(self._targets(), reverse=True)
        if not sel:
            messagebox.showinfo("No selection", "Tick rows or use Ctrl/Shift to select channels.", parent=self)
            return
        if not confirm(self, "Delete", f"Delete {len(sel)} channel(s)? This updates favorites accordingly."):
            return
        for i in sel:  # delete highest index first
            self.data.delete_channel_and_fix_favs(i)
        self.checked.clear()
        self.data.ensure_counts_and_indices()
        self.apply_channel_filter()
        self.refresh_favorites()
        self.refresh_summary()
        self.status.set(f"Deleted {len(sel)} channel(s).")

    def delete_selected_transponders(self):
        if not self.data:
            return
        sel_iids = list(self.tree_tp.selection())
        if not sel_iids:
            messagebox.showinfo("No selection", "Select one or more transponders to delete.", parent=self)
            return

        tp_indices = sorted([int(i) for i in sel_iids], reverse=True)
        if not confirm(self, "Delete Transponders",
                       f"Delete {len(tp_indices)} transponder(s)?\n\n"
                       "All channels on these TPs will also be deleted (favorites will be fixed)."):
            return

        d = self.data
        # For each TP (descending), delete its channels, then remove the TP
        for tp_idx in tp_indices:
            # delete channels that belong to this TP (descending index)
            for ch_i in range(len(d.channels) - 1, -1, -1):
                if int(d.channels[ch_i].get("TPIndex", -1)) == tp_idx:
                    d.delete_channel_and_fix_favs(ch_i)

            # remove the TP itself
            if 0 <= tp_idx < len(d.transponders):
                del d.transponders[tp_idx]

            # shift TPIndex for remaining channels > tp_idx
            for ch in d.channels:
                cur = int(ch.get("TPIndex", 0))
                if cur > tp_idx:
                    ch["TPIndex"] = cur - 1

        d.ensure_counts_and_indices()
        self.refresh_transponders()
        self.refresh_channels()
        self.refresh_summary()
        self.status.set(f"Deleted {len(tp_indices)} transponder(s) and related channels.")

    def delete_selected_satellites(self):
        if not self.data:
            return
        sel_iids = list(self.tree_sat.selection())
        if not sel_iids:
            messagebox.showinfo("No selection", "Select one or more satellites to delete.", parent=self)
            return

        sat_indices = sorted([int(i) for i in sel_iids], reverse=True)
        if not confirm(self, "Delete Satellites",
                       f"Delete {len(sat_indices)} satellite(s)?\n\n"
                       "All their transponders and channels will also be deleted (favorites will be fixed)."):
            return

        d = self.data
        for sat_idx in sat_indices:
            # 1) collect TP indices belonging to this satellite
            tp_indices = [t["Index"] for t in d.transponders if int(t.get("SatIndex", -1)) == sat_idx]
            tp_indices.sort(reverse=True)

            # 2) delete channels on those TPs
            for tp_idx in tp_indices:
                for ch_i in range(len(d.channels) - 1, -1, -1):
                    if int(d.channels[ch_i].get("TPIndex", -1)) == tp_idx:
                        d.delete_channel_and_fix_favs(ch_i)

            # 3) delete the TPs themselves (and later fix TPIndex shifts)
            for tp_idx in tp_indices:
                if 0 <= tp_idx < len(d.transponders):
                    del d.transponders[tp_idx]
                # shift TPIndex for remaining channels > tp_idx
                for ch in d.channels:
                    cur = int(ch.get("TPIndex", 0))
                    if cur > tp_idx:
                        ch["TPIndex"] = cur - 1

            # 4) delete the satellite
            if 0 <= sat_idx < len(d.satellites):
                del d.satellites[sat_idx]

            # 5) fix SatIndex for remaining TPs that were after this satellite
            for t in d.transponders:
                cur_si = int(t.get("SatIndex", 0))
                if cur_si > sat_idx:
                    t["SatIndex"] = cur_si - 1

        d.ensure_counts_and_indices()
        self.refresh_satellites()
        self.refresh_transponders()
        self.refresh_channels()
        self.refresh_summary()
        self.status.set(f"Deleted {len(sat_indices)} satellite(s) with their TPs and channels.")

    def _delete_selected_members_btn(self):
        """Top-bar 'Delete Selected' for Favorites members."""
        tv_sel = list(self.lst_fav_tv.curselection()) if hasattr(self, "lst_fav_tv") else []
        rd_sel = list(self.lst_fav_radio.curselection()) if hasattr(self, "lst_fav_radio") else []

        if tv_sel:
            self._fav_remove_selected("TV")
        elif rd_sel:
            self._fav_remove_selected("Radio")
        else:
            messagebox.showinfo(
                "No selection",
                "Select one or more items in TV Members or Radio Members, then click 'Delete Selected'.",
                parent=self
            )

    def jump_to_channel(self, ch_i: int):
        """Show Channels tab and focus row ch_i, clearing filters so it's visible."""
        if not self.data:
            return
        # Make sure the channel isn't hidden by filters
        self.var_search.set("")
        self.var_sat_filter.set("All")
        self.var_show_tv.set(True)
        self.var_show_radio.set(True)
        self.apply_channel_filter()

        # Switch tab and highlight the row
        self.nb.select(self.tab_channels)
        if 0 <= ch_i < len(self.data.channels):
            iid = str(ch_i)
            if self.tree_ch.exists(iid):
                self.tree_ch.selection_set(iid)
                self.tree_ch.focus(iid)
                self.tree_ch.see(iid)

    # ---- GUI Built----
    def _build_menu(self):
        menubar = tk.Menu(self)

        # ---- File ----
        filem = tk.Menu(menubar, tearoff=False)
        # Open handles both .chl and .xml now (logic in open_file)
        filem.add_command(label="Open…", command=self.open_file)
        filem.add_separator()
        filem.add_command(label="Save", command=self.save_file, accelerator="Ctrl+S")
        filem.add_command(label="Save As…", command=self.save_file_as)
        filem.add_separator()
        filem.add_command(label="Export Channels to CSV…", command=self.export_csv)
        filem.add_separator()
        filem.add_command(label="Exit", command=self.on_exit)
        menubar.add_cascade(label="File", menu=filem)

        # ---- Tools ----
        toolsm = tk.Menu(menubar, tearoff=False)
        toolsm.add_command(label="Recalculate/Validate", command=self.recalc_validate)
        toolsm.add_separator()
        toolsm.add_command(label="Load Embedded Satellites XML", command=self.load_embedded_satellites_xml)
        toolsm.add_command(label="Make Embedded Satellites String…", command=self.make_embedded_satellites_string)
        menubar.add_cascade(label="Tools", menu=toolsm)

        # ---- Help ----
        helpm = tk.Menu(menubar, tearoff=False)
        helpm.add_command(label="Instructions", command=self.show_instructions)
        helpm.add_separator()
        helpm.add_command(label="About", command=self.show_about)
        menubar.add_cascade(label="Help", menu=helpm)


        self.config(menu=menubar)
        self.bind_all("<Control-s>", lambda e: self.save_file())

    def _build_main(self):
        self.status = tk.StringVar(value="Ready.")
        self.nb = ttk.Notebook(self)
        self.nb.pack(fill="both", expand=True)

        self._build_tab_channels()
        self._build_tab_favorites()
        self._build_tab_transponders()
        self._build_tab_satellites()
        self._build_tab_summary()

        ttk.Label(self, textvariable=self.status, anchor="w", padding=(8,3)).pack(fill="x", side="bottom")

    def _build_tab_favorites(self):
        self.tab_fav = ttk.Frame(self.nb)
        self.nb.add(self.tab_fav, text="Favorites")

        # --- top bar ---
        top = ttk.Frame(self.tab_fav, padding=6)
        top.pack(fill="x")
        ttk.Label(top, text="Search groups:").pack(side="left")
        self.var_fav_filter = tk.StringVar()
        ent = ttk.Entry(top, textvariable=self.var_fav_filter, width=30)
        ent.pack(side="left", padx=(4, 12))
        ent.bind("<KeyRelease>", lambda e: self.refresh_favorites())

        ttk.Button(top, text="New Group", command=self.new_fav_group).pack(side="left")
        ttk.Button(top, text="Rename Group", command=self.rename_fav_group).pack(side="left", padx=6)
        ttk.Button(top, text="Delete Group", command=self.delete_fav_group).pack(side="left", padx=6)
        ttk.Button(top, text="Delete Ch",
           command=self._delete_selected_members_btn).pack(side="left", padx=6)


        # ⬅️ Renamed and re-wired button: uses right-click “Move to Favorite…” logic
        ttk.Button(top, text="Move Ch → Group", command=self._move_selected_btn).pack(side="left", padx=(18, 6))

        ttk.Button(top, text="Remove Ch by No",
                   command=self.remove_channel_from_current_fav).pack(side="left")

        # --- main split ---
        body = ttk.Panedwindow(self.tab_fav, orient="horizontal")
        body.pack(fill="both", expand=True, padx=6, pady=6)

        # left: groups
        left = ttk.Frame(body); body.add(left, weight=1)
        ttk.Label(left, text="Groups").pack(anchor="w")
        self.lst_fav = tk.Listbox(left, height=20, exportselection=False)
        vsb = ttk.Scrollbar(left, orient="vertical", command=self.lst_fav.yview)
        self.lst_fav.configure(yscrollcommand=vsb.set)
        self.lst_fav.pack(side="left", fill="both", expand=True)
        vsb.pack(side="left", fill="y", padx=(4, 0))

        # right: members (TV/Radio)
        right = ttk.Frame(body); body.add(right, weight=2)
        members = ttk.Panedwindow(right, orient="horizontal")
        members.pack(fill="both", expand=True)

        # TV members listbox
        tv_frame = ttk.LabelFrame(members, text="TV Members", padding=6)
        self.lst_fav_tv = tk.Listbox(tv_frame, selectmode="extended", exportselection=False)
        vsb_tv = ttk.Scrollbar(tv_frame, orient="vertical", command=self.lst_fav_tv.yview)
        self.lst_fav_tv.configure(yscrollcommand=vsb_tv.set)
        self.lst_fav_tv.grid(row=0, column=0, sticky="nsew")
        vsb_tv.grid(row=0, column=1, sticky="ns")
        tv_frame.grid_rowconfigure(0, weight=1)
        tv_frame.grid_columnconfigure(0, weight=1)

        # Radio members listbox
        rd_frame = ttk.LabelFrame(members, text="Radio Members", padding=6)
        self.lst_fav_radio = tk.Listbox(rd_frame, selectmode="extended", exportselection=False)
        vsb_rd = ttk.Scrollbar(rd_frame, orient="vertical", command=self.lst_fav_radio.yview)
        self.lst_fav_radio.configure(yscrollcommand=vsb_rd.set)
        self.lst_fav_radio.grid(row=0, column=0, sticky="nsew")
        vsb_rd.grid(row=0, column=1, sticky="ns")
        rd_frame.grid_rowconfigure(0, weight=1)
        rd_frame.grid_columnconfigure(0, weight=1)

        members.add(tv_frame, weight=1)
        members.add(rd_frame, weight=1)

        # bindings
        self.lst_fav.bind("<<ListboxSelect>>", lambda e: self.refresh_fav_members())

        # context menus for TV/Radio member lists
        self.menu_fav_tv = tk.Menu(self, tearoff=False)
        self.menu_fav_tv.add_command(label="Add to Favorite…", command=lambda: self._fav_add_or_move_to_group("TV", move=False))
        self.menu_fav_tv.add_command(label="Move to Favorite…", command=lambda: self._fav_add_or_move_to_group("TV", move=True))
        self.menu_fav_tv.add_separator()
        self.menu_fav_tv.add_command(label="Move Up ▲", command=lambda: self._fav_move_selected("TV", -1))
        self.menu_fav_tv.add_command(label="Move Down ▼", command=lambda: self._fav_move_selected("TV", +1))
        self.menu_fav_tv.add_separator()
        self.menu_fav_tv.add_command(label="Remove", command=lambda: self._fav_remove_selected("TV"))

        self.menu_fav_radio = tk.Menu(self, tearoff=False)
        self.menu_fav_radio.add_command(label="Add to Favorite…", command=lambda: self._fav_add_or_move_to_group("Radio", move=False))
        self.menu_fav_radio.add_command(label="Move to Favorite…", command=lambda: self._fav_add_or_move_to_group("Radio", move=True))
        self.menu_fav_radio.add_separator()
        self.menu_fav_radio.add_command(label="Move Up ▲", command=lambda: self._fav_move_selected("Radio", -1))
        self.menu_fav_radio.add_command(label="Move Down ▼", command=lambda: self._fav_move_selected("Radio", +1))
        self.menu_fav_radio.add_separator()
        self.menu_fav_radio.add_command(label="Remove", command=lambda: self._fav_remove_selected("Radio"))

        self.lst_fav_tv.bind("<Button-3>", lambda e: self._popup_menu(self.menu_fav_tv, e, self.lst_fav_tv))
        self.lst_fav_radio.bind("<Button-3>", lambda e: self._popup_menu(self.menu_fav_radio, e, self.lst_fav_radio))

        self.refresh_favorites()

    def _build_tab_channels(self):
        # --- tab + top filters ---
        self.tab_channels = ttk.Frame(self.nb)
        self.nb.add(self.tab_channels, text="Channels")

        top = ttk.Frame(self.tab_channels, padding=6)
        top.pack(fill="x")
        ttk.Label(top, text="Search:").pack(side="left")
        self.var_search = tk.StringVar()
        ent = ttk.Entry(top, textvariable=self.var_search, width=30)
        ent.pack(side="left", padx=(4, 12))
        ent.bind("<KeyRelease>", lambda e: self.apply_channel_filter())

        self.var_show_tv = tk.BooleanVar(value=True)
        self.var_show_radio = tk.BooleanVar(value=True)
        ttk.Checkbutton(top, text="TV", variable=self.var_show_tv,
                        command=self.apply_channel_filter).pack(side="left")
        ttk.Checkbutton(top, text="Radio", variable=self.var_show_radio,
                        command=self.apply_channel_filter).pack(side="left", padx=(6, 12))

        ttk.Label(top, text="Satellite:").pack(side="left")
        self.var_sat_filter = tk.StringVar(value="All")
        self.cmb_sat_filter = ttk.Combobox(
            top, textvariable=self.var_sat_filter, state="readonly", width=28, values=["All"]
        )
        self.cmb_sat_filter.pack(side="left")
        self.cmb_sat_filter.bind("<<ComboboxSelected>>", lambda e: self.apply_channel_filter())

        ttk.Button(top, text="Clear Filters", command=self.clear_channel_filters).pack(side="left", padx=(12, 0))

        # --- main split ---
        body = ttk.Panedwindow(self.tab_channels, orient="horizontal")
        body.pack(fill="both", expand=True, padx=6, pady=6)
        left = ttk.Frame(body)
        right = ttk.Frame(body)
        body.add(left, weight=3)
        body.add(right, weight=2)

        # --- tree (first column is textual checkbox) ---
        cols = (
            "Checked", "Index", "TVType", "Name", "Provider", "Sat", "TP",
            "VideoType", "VideoPID", "SID", "Lock", "Skip", "Hide"
        )
        frame_ch = ttk.Frame(left)
        frame_ch.pack(fill="both", expand=True)

        self.tree_ch = ttk.Treeview(frame_ch, columns=cols, show="headings", selectmode="extended")

        # textual checkbox column
        self.tree_ch.heading("Checked", text="", anchor="center")
        self.tree_ch.column("Checked", width=28, stretch=False, anchor="center")

        # other columns
        for c in cols[1:]:
            self.tree_ch.heading(c, text=c, command=lambda c=c: self.sort_channel_column(c))
            self.tree_ch.column(c, width=80 if c not in ("Name", "Provider", "Sat", "TP") else 160, anchor="w")

        vsb_ch = ttk.Scrollbar(frame_ch, orient="vertical", command=self.tree_ch.yview)
        hsb_ch = ttk.Scrollbar(frame_ch, orient="horizontal", command=self.tree_ch.xview)
        self.tree_ch.configure(yscroll=vsb_ch.set, xscroll=hsb_ch.set)

        self.tree_ch.grid(row=0, column=0, sticky="nsew")
        vsb_ch.grid(row=0, column=1, sticky="ns")
        hsb_ch.grid(row=1, column=0, sticky="ew")
        frame_ch.grid_rowconfigure(0, weight=1)
        frame_ch.grid_columnconfigure(0, weight=1)

        # bindings (use textual checkboxes)
        self.tree_ch.bind("<<TreeviewSelect>>", lambda e: self.load_selected_channel_to_editor())
        self.tree_ch.bind("<Button-1>", self._on_tree_click, add="+")   # toggles on first column
        self.tree_ch.bind("<Button-3>", self._on_tree_rclick)           # context menu

        # --- row action buttons ---
        btns = ttk.Frame(left)
        btns.pack(fill="x", pady=4)
        ttk.Button(btns, text="▲ Up", command=lambda: self.move_channels(-1)).pack(side="left")
        ttk.Button(btns, text="▼ Down", command=lambda: self.move_channels(+1)).pack(side="left", padx=6)
        ttk.Button(btns, text="Delete", command=self.delete_selected_channels).pack(side="left", padx=6)
        ttk.Button(btns, text="Add to Favorite…", command=self.add_selected_to_favorite).pack(side="left", padx=6)

        # --- editor panel ---
        form = ttk.LabelFrame(right, text="Channel Details", padding=8)
        form.pack(fill="both", expand=True)
        self.ed_vars = {
            "Index": tk.StringVar(), "Name": tk.StringVar(), "Provider": tk.StringVar(),
            "TVType": tk.StringVar(value="TV"), "VideoType": tk.StringVar(value="H264"),
            "VideoPID": tk.IntVar(value=0), "PcrPID": tk.IntVar(value=0), "PmtPID": tk.IntVar(value=0),
            "SID": tk.IntVar(value=0), "TTXPID": tk.IntVar(value=0),
            "TPIndex": tk.IntVar(value=0), "Lock": tk.BooleanVar(value=False),
            "Skip": tk.BooleanVar(value=False), "Hide": tk.BooleanVar(value=False),
        }
        grid = ttk.Frame(form)
        grid.pack(fill="x", expand=False)

        def row(lbl, widget):
            r = row.i
            ttk.Label(grid, text=lbl + ":", width=14, anchor="e").grid(row=r, column=0, sticky="e", padx=4, pady=3)
            widget.grid(row=r, column=1, sticky="ew", padx=4, pady=3)
            grid.grid_columnconfigure(1, weight=1)
            row.i += 1
        row.i = 0

        row("Index", ttk.Entry(grid, textvariable=self.ed_vars["Index"], state="readonly"))
        row("Name", ttk.Entry(grid, textvariable=self.ed_vars["Name"]))
        row("Provider", ttk.Entry(grid, textvariable=self.ed_vars["Provider"]))
        row("Type", ttk.Combobox(grid, textvariable=self.ed_vars["TVType"], state="readonly", values=["TV", "Radio"]))
        row("VideoType", ttk.Combobox(grid, textvariable=self.ed_vars["VideoType"], state="readonly",
                                      values=["H264", "H265", "MPEG2", "AVS2", "Other"]))
        row("VideoPID", ttk.Entry(grid, textvariable=self.ed_vars["VideoPID"]))
        row("PcrPID", ttk.Entry(grid, textvariable=self.ed_vars["PcrPID"]))
        row("PmtPID", ttk.Entry(grid, textvariable=self.ed_vars["PmtPID"]))
        row("SID", ttk.Entry(grid, textvariable=self.ed_vars["SID"]))
        row("TTXPID", ttk.Entry(grid, textvariable=self.ed_vars["TTXPID"]))

        ttk.Label(grid, text="Transponder:", width=14, anchor="e").grid(row=row.i, column=0, sticky="e", padx=4, pady=3)
        self.cmb_tp = ttk.Combobox(grid, state="readonly")
        self.cmb_tp.grid(row=row.i, column=1, sticky="ew", padx=4, pady=3)
        row.i += 1

        flags = ttk.Frame(form)
        flags.pack(fill="x", pady=(6, 0))
        ttk.Checkbutton(flags, text="Lock", variable=self.ed_vars["Lock"]).pack(side="left")
        ttk.Checkbutton(flags, text="Skip", variable=self.ed_vars["Skip"]).pack(side="left", padx=10)
        ttk.Checkbutton(flags, text="Hide", variable=self.ed_vars["Hide"]).pack(side="left")

        actions = ttk.Frame(form)
        actions.pack(fill="x", pady=10)
        ttk.Button(actions, text="Apply Changes to Selected",
                   command=self.apply_channel_changes).pack(side="left")
        ttk.Button(actions, text="Batch: Lock",
                   command=lambda: self.batch_flag("Lock", True)).pack(side="left", padx=6)
        ttk.Button(actions, text="Batch: Skip",
                   command=lambda: self.batch_flag("Skip", True)).pack(side="left", padx=6)
        ttk.Button(actions, text="Batch: Hide",
                   command=lambda: self.batch_flag("Hide", True)).pack(side="left", padx=6)
        ttk.Button(actions, text="Batch: Clear Flags",
                   command=self.batch_clear_flags).pack(side="left", padx=6)

        # --- context menu (created HERE so 'self' exists) ---
        self.menu_ch = tk.Menu(self, tearoff=False)
        self.menu_ch.add_command(label="Add to Favorite…", command=self._ctx_add_to_fav)
        self.menu_ch.add_separator()
        self.menu_ch.add_command(label="Move Up ▲", command=lambda: self._ctx_move(-1))
        self.menu_ch.add_command(label="Move Down ▼", command=lambda: self._ctx_move(+1))
        self.menu_ch.add_separator()
        self.menu_ch.add_command(label="Delete…", command=self._ctx_delete)
        self.menu_ch.add_separator()
        self.menu_ch.add_command(label="Check Selected", command=self._ctx_check_selected)
        self.menu_ch.add_command(label="Uncheck Selected", command=self._ctx_uncheck_selected)
        self.menu_ch.add_command(label="Clear All Checks", command=self._ctx_clear_checks)

    def _build_tab_transponders(self):
        self.tab_tp = ttk.Frame(self.nb)
        self.nb.add(self.tab_tp, text="Transponders")

        top = ttk.Frame(self.tab_tp, padding=6)
        top.pack(fill="x")
        ttk.Label(top, text="Search:").pack(side="left")
        self.var_tp_search = tk.StringVar()
        ent_tp = ttk.Entry(top, textvariable=self.var_tp_search, width=30)
        ent_tp.pack(side="left", padx=(4,12))
        ent_tp.bind("<KeyRelease>", lambda e: self.refresh_transponders())

        ttk.Label(top, text="(Double-click a cell to edit.)").pack(side="left", padx=(8, 0))
        # ⬇️ move button here
        ttk.Button(top, text="Delete Selected",
                   command=self.delete_selected_transponders).pack(side="left", padx=(12, 0))

        cols = ("Index", "SatIndex", "Freq", "Pol", "SR", "FEC", "plsNumber", "msIsid", "msTp")
        frame_tp = ttk.Frame(self.tab_tp)
        frame_tp.pack(fill="both", expand=True, padx=6, pady=6)

        # allow multi-select so multiple TPs can be deleted
        self.tree_tp = ttk.Treeview(frame_tp, columns=cols, show="headings", selectmode="extended")
        for c in cols:
            self.tree_tp.heading(c, text=c)
            self.tree_tp.column(c, width=100, anchor="w")

        vsb_tp = ttk.Scrollbar(frame_tp, orient="vertical", command=self.tree_tp.yview)
        hsb_tp = ttk.Scrollbar(frame_tp, orient="horizontal", command=self.tree_tp.xview)
        self.tree_tp.configure(yscroll=vsb_tp.set, xscroll=hsb_tp.set)

        self.tree_tp.grid(row=0, column=0, sticky="nsew")
        vsb_tp.grid(row=0, column=1, sticky="ns")
        hsb_tp.grid(row=1, column=0, sticky="ew")
        frame_tp.grid_rowconfigure(0, weight=1); frame_tp.grid_columnconfigure(0, weight=1)

        self.tree_tp.bind("<Double-1>", self.tp_begin_edit)

    def _build_tab_satellites(self):
        self.tab_sat = ttk.Frame(self.nb)
        self.nb.add(self.tab_sat, text="Satellites")

        top = ttk.Frame(self.tab_sat, padding=6)
        top.pack(fill="x")
        ttk.Label(top, text="Search:").pack(side="left")
        self.var_sat_search = tk.StringVar()
        ent_sat = ttk.Entry(top, textvariable=self.var_sat_search, width=30)
        ent_sat.pack(side="left", padx=(4,12))
        ent_sat.bind("<KeyRelease>", lambda e: self.refresh_satellites())

        ttk.Label(top, text="(Double-click a cell to edit.)").pack(side="left", padx=(8, 0))
        # ⬇️ move button here
        ttk.Button(top, text="Delete Selected",
                   command=self.delete_selected_satellites).pack(side="left", padx=(12, 0))

        cols = ("Index", "Name", "Angle", "Band")

        frame_sat = ttk.Frame(self.tab_sat)
        frame_sat.pack(fill="both", expand=True, padx=6, pady=6)

        # allow multi-select for deleting several satellites
        self.tree_sat = ttk.Treeview(frame_sat, columns=cols, show="headings", selectmode="extended")
        for c in cols:
            self.tree_sat.heading(c, text=c)
            self.tree_sat.column(c, width=140 if c == "Name" else 100, anchor="w")

        vsb_sat = ttk.Scrollbar(frame_sat, orient="vertical", command=self.tree_sat.yview)
        hsb_sat = ttk.Scrollbar(frame_sat, orient="horizontal", command=self.tree_sat.xview)
        self.tree_sat.configure(yscroll=vsb_sat.set, xscroll=hsb_sat.set)

        self.tree_sat.grid(row=0, column=0, sticky="nsew")
        vsb_sat.grid(row=0, column=1, sticky="ns")
        hsb_sat.grid(row=1, column=0, sticky="ew")
        frame_sat.grid_rowconfigure(0, weight=1); frame_sat.grid_columnconfigure(0, weight=1)

        self.tree_sat.bind("<Double-1>", self.sat_begin_edit)

    def _build_tab_summary(self):
        self.tab_summary = ttk.Frame(self.nb)
        self.nb.add(self.tab_summary, text="Summary")
        self.lbl_summary = tk.Text(self.tab_summary, height=30, state="disabled")
        self.lbl_summary.pack(fill="both", expand=True, padx=6, pady=6)

    # ---------------- File ops ----------------
    def open_file(self):
        path = filedialog.askopenfilename(
            title="Open .chl / .sdx / satellites.xml",
            filetypes=[
                ("Channel List CHL", "*.chl"),
                ("GTMedia SDX", "*.sdx"),
                ("Satellites XML", "*.xml"),
                ("All files", "*.*"),
            ]
        )
        if not path:
            return

        ext = os.path.splitext(path)[1].lower()
        try:
            if ext == ".chl":
                self.load_file(path)  # parse_chl_file inside load_file()
                self.file_format = "chl"

            elif ext == ".sdx":
                self.status.set(f"Loading {path} …"); self.update_idletasks()
                data = parse_sdx_file(path)
                self.filepath = path
                self.file_format = "sdx"
                self.data = data
                self.refresh_all()
                self.status.set(
                    f"Loaded SDX: {os.path.basename(path)} "
                    f"(TV={data.meta.get('ChTV')}, Radio={data.meta.get('CHRadio')}, "
                    f"TP={data.meta.get('TP')}, Sat={data.meta.get('Sat')})"
                )

            elif ext == ".xml":
                self.status.set(f"Loading {path} …"); self.update_idletasks()
                data = parse_satellites_xml_file(path)
                self.filepath = path
                self.file_format = "xml"
                self.data = data
                self.refresh_all()
                self.status.set(
                    f"Loaded XML: {os.path.basename(path)} (TP={data.meta.get('TP')}, Sat={data.meta.get('Sat')})"
                )
            else:
                messagebox.showerror("Unsupported file", f"Unsupported extension:\n{path}", parent=self)
        except Exception as e:
            messagebox.showerror("Open failed", f"Failed to open:\n{path}\n\n{e}", parent=self)
            self.status.set("Open failed")

    def load_file(self, path: str):
        self.status.set(f"Loading {path} …"); self.update_idletasks()
        data = parse_chl_file(path)
        self.filepath = path; self.data = data
        self.refresh_all()
        self.status.set(f"Loaded: {os.path.basename(path)} (TV={data.meta.get('ChTV')}, "
                        f"Radio={data.meta.get('CHRadio')}, TP={data.meta.get('TP')}, Sat={data.meta.get('Sat')})")

    def save_file(self):
        if not self.data:
            return
        # If never saved (e.g. New empty), ask for a path/format
        if not self.filepath:
            return self.save_file_as()

        try:
            fmt = getattr(self, "file_format", "chl")
            if fmt == "chl":
                write_chl_file(self.filepath, self.data)
            elif fmt == "sdx":
                write_sdx_file(self.filepath, self.data)
            elif fmt == "xml":
                write_satellites_xml_file(self.filepath, self.data)
            else:
                # fallback
                write_chl_file(self.filepath, self.data)

            self.status.set(f"Saved: {self.filepath}")
            messagebox.showinfo("Saved", f"Saved:\n{self.filepath}\n(Backup at .bak)", parent=self)
        except Exception as e:
            messagebox.showerror("Save Error", str(e), parent=self)

    def save_file_as(self):
        if not self.data:
            return
        path = filedialog.asksaveasfilename(
            title="Save As",
            defaultextension=".chl",
            filetypes=[
                ("Channel List CHL", "*.chl"),
                ("GTMedia SDX", "*.sdx"),
                ("Satellites XML", "*.xml"),
                ("All files", "*.*"),
            ]
        )
        if not path:
            return

        ext = os.path.splitext(path)[1].lower()
        try:
            # Write according to chosen extension
            if ext == ".chl":
                write_chl_file(path, self.data)
                self.file_format = "chl"
            elif ext == ".sdx":
                write_sdx_file(path, self.data)
                self.file_format = "sdx"
            elif ext == ".xml":
                write_satellites_xml_file(path, self.data)
                self.file_format = "xml"
            else:
                # default to .chl if unknown
                write_chl_file(path, self.data)
                self.file_format = "chl"

            self.filepath = path
            self.status.set(f"Saved: {self.filepath}")
            messagebox.showinfo("Saved", f"Saved:\n{self.filepath}\n(Backup at .bak)", parent=self)
        except Exception as e:
            messagebox.showerror("Save Error", str(e), parent=self)

    def export_csv(self):
        if not self.data: return
        path = filedialog.asksaveasfilename(title="Export Channels CSV", defaultextension=".csv",
                                            filetypes=[("CSV","*.csv")])
        if not path: return
        try:
            self.data.rebuild_indexes()
            with open(path, "w", newline="", encoding="utf-8") as f:
                w = csv.writer(f)
                w.writerow(["Index","TVType","Name","Provider","SatName","TP(Freq Pol SR)",
                            "VideoType","VideoPID","SID","Lock","Skip","Hide"])
                for i, ch in enumerate(self.data.channels):
                    tpidx = ch.get("TPIndex", -1)
                    w.writerow([
                        i, ch.get("TVType",""), ch.get("Name",""), ch.get("Provider",""),
                        self.data.sat_name_for_tpindex(tpidx), self.data.tp_label(tpidx),
                        ch.get("VideoType",""), ch.get("VideoPID",""), ch.get("SID",""),
                        ch.get("Lock",0), ch.get("Skip",0), ch.get("Hide",0)
                    ])
            messagebox.showinfo("Exported", f"Exported to:\n{path}", parent=self)
        except Exception as e:
            messagebox.showerror("Export Error", str(e), parent=self)

    def on_exit(self):
        if confirm(self, "Exit", "Close the editor?"):
            self.destroy()

    def load_embedded_satellites_xml(self):
        """
        Load the gzip+base64-embedded satellites.xml (if present in SATELLITES_XML_GZ_B64).
        """
        try:
            data = parse_satellites_xml_embedded()
            if not data:
                messagebox.showwarning(
                    "No embedded XML",
                    "SATELLITES_XML_GZ_B64 is empty.\n\n"
                    "Use Tools ▸ Make Embedded Satellites String… to generate it,\n"
                    "then paste the returned string into SATELLITES_XML_GZ_B64 in the source.",
                    parent=self
                )
                return
            self.filepath = ""  # force Save As when saving to .chl
            self.data = data
            self.refresh_all()
            self.status.set(
                f"Loaded embedded satellites.xml (TP={data.meta.get('TP')}, Sat={data.meta.get('Sat')})"
            )
            messagebox.showinfo(
                "Loaded embedded XML",
                "Satellites + Transponders loaded from embedded XML.\n\n"
                "Tip: Use File ▸ Save/Save As to export a .chl file.",
                parent=self
            )
        except Exception as e:
            messagebox.showerror("Load embedded XML failed", f"{e}", parent=self)

    def make_embedded_satellites_string(self):
        """
        Pick a satellites.xml and produce a gzip+base64 string, copied to clipboard.
        Paste it into the SATELLITES_XML_GZ_B64 constant near the imports.
        """
        path = filedialog.askopenfilename(
            title="Pick satellites.xml to embed",
            filetypes=[("Satellites XML", "*.xml"), ("All files", "*.*")]
        )
        if not path:
            return
        try:
            s = make_gz_b64_from_file(path)
            # Copy to clipboard for quick paste into the source file
            self.clipboard_clear()
            self.clipboard_append(s)
            self.update()  # keep clipboard contents

            # Optionally also save to a .txt next to the xml
            out_txt = os.path.splitext(path)[0] + "-embedded-gz-b64.txt"
            try:
                with open(out_txt, "w", encoding="utf-8") as f:
                    f.write(s)
            except Exception:
                out_txt = None

            msg = "The gzip+base64 string has been copied to the clipboard."
            if out_txt:
                msg += f"\nAlso saved as:\n{out_txt}"
            messagebox.showinfo(
                "Embedded string ready",
                msg + "\n\nPaste it into SATELLITES_XML_GZ_B64 near the imports.",
                parent=self
            )
        except Exception as e:
            messagebox.showerror("Make embedded string failed", f"{e}", parent=self)

    # ---------------- Refresh & filters ----------------
    def refresh_all(self):
        self.refresh_sat_filter()
        self.refresh_channels()
        self.refresh_favorites()
        self.refresh_transponders()
        self.refresh_satellites()
        self.refresh_summary()

    def refresh_sat_filter(self):
        if not self.data:
            self.cmb_sat_filter["values"] = ["All"]; self.cmb_sat_filter.set("All"); return
        sats = ["All"] + [s.get("Name","") for s in self.data.satellites]
        self.cmb_sat_filter["values"] = sats
        if self.var_sat_filter.get() not in sats:
            self.var_sat_filter.set("All")

    def refresh_channels(self):
        self.tree_ch.delete(*self.tree_ch.get_children())
        self.cmb_tp["values"] = []
        if not self.data: return
        tp_values = [f"{i}: {self.data.tp_label(i)} | {self.data.sat_name_for_tpindex(i)}"
                     for i in range(len(self.data.transponders))]
        self.cmb_tp["values"] = tp_values
        self.apply_channel_filter()

    def clear_channel_filters(self):
        self.var_search.set(""); self.var_sat_filter.set("All")
        self.var_show_tv.set(True); self.var_show_radio.set(True)
        self.apply_channel_filter()

    def apply_channel_filter(self):
        self.tree_ch.delete(*self.tree_ch.get_children())
        self.filtered_indices = []
        if not self.data:
            return

        # keep only checks that still correspond to real channels
        self.checked &= set(range(len(self.data.channels)))

        q = self.var_search.get().strip().lower()
        show_tv = self.var_show_tv.get()
        show_radio = self.var_show_radio.get()
        sat_name = self.var_sat_filter.get()

        for i, ch in enumerate(self.data.channels):
            tvt = ch.get("TVType","")
            if tvt == "TV" and not show_tv:   continue
            if tvt == "Radio" and not show_radio: continue

            name = ch.get("Name","")
            provider = ch.get("Provider","")
            tpidx = ch.get("TPIndex",-1)
            satn = self.data.sat_name_for_tpindex(tpidx)
            tp_label = self.data.tp_label(tpidx)
            text_blob = f"{name} {provider} {satn} {tp_label}".lower()
            if q and q not in text_blob:       continue
            if sat_name != "All" and satn != sat_name: continue

            self.filtered_indices.append(i)
            chk = "☑" if i in self.checked else "☐"
            self.tree_ch.insert(
                "",
                "end",
                iid=str(i),
                values=(chk, i, ch.get("TVType",""), name, provider, satn, tp_label,
                        ch.get("VideoType",""), ch.get("VideoPID",""),
                        ch.get("SID",""), ch.get("Lock",0), ch.get("Skip",0), ch.get("Hide",0))
            )

        self.status.set(f"Channels shown: {len(self.filtered_indices)} / {len(self.data.channels)}")

    def sort_channel_column(self, col: str):
        if not self.data or not self.filtered_indices:
            return

        def val_for(i):
            ch = self.data.channels[i]
            if col == "Index":     return i
            if col == "TVType":    return ch.get("TVType","")
            if col == "Name":      return ch.get("Name","")
            if col == "Provider":  return ch.get("Provider","")
            if col == "Sat":       return self.data.sat_name_for_tpindex(ch.get("TPIndex",-1))
            if col == "TP":        return self.data.tp_label(ch.get("TPIndex",-1))
            if col == "VideoType": return ch.get("VideoType","")
            if col == "VideoPID":  return ch.get("VideoPID",0)
            if col == "SID":       return ch.get("SID",0)
            if col in ("Lock","Skip","Hide"): return ch.get(col,0)
            return ""

        rows = [(val_for(i), i) for i in self.filtered_indices]
        ascending = not getattr(self, "_sort_desc_"+col, False)
        rows.sort(key=lambda x: (x[0] is None, x[0]))
        if not ascending:
            rows.reverse()
        setattr(self, "_sort_desc_"+col, not ascending)

        self.tree_ch.delete(*self.tree_ch.get_children())
        for _, i in rows:
            ch = self.data.channels[i]
            name = ch.get("Name","")
            provider = ch.get("Provider","")
            tpidx = ch.get("TPIndex",-1)
            satn = self.data.sat_name_for_tpindex(tpidx)
            tp_label = self.data.tp_label(tpidx)
            chk = "☑" if i in self.checked else "☐"
            self.tree_ch.insert(
                "",
                "end",
                iid=str(i),
                values=(chk, i, ch.get("TVType",""), name, provider, satn, tp_label,
                        ch.get("VideoType",""), ch.get("VideoPID",""),
                        ch.get("SID",""), ch.get("Lock",0), ch.get("Skip",0), ch.get("Hide",0))
            )

    def _on_tree_click(self, event):
        region = self.tree_ch.identify("region", event.x, event.y)
        if region != "cell":
            return
        row = self.tree_ch.identify_row(event.y)
        col_id = self.tree_ch.identify_column(event.x)  # '#1' = first column
        if not row or col_id != "#1":   # only toggle in the "Checked" column
            return
        i = int(row)
        if i in self.checked:
            self.checked.remove(i)
            self.tree_ch.set(row, "Checked", "☐")
        else:
            self.checked.add(i)
            self.tree_ch.set(row, "Checked", "☑")
        return "break"  # stop default selection change on checkbox click

    def _on_tree_rclick(self, event):
        # focus row under cursor (and select if not already selected)
        row = self.tree_ch.identify_row(event.y)
        if row:
            if row not in self.tree_ch.selection():
                self.tree_ch.selection_set(row)
            self.tree_ch.focus(row)
        try:
            self.menu_ch.tk_popup(event.x_root, event.y_root)
        finally:
            self.menu_ch.grab_release()

    def _targets(self):
        """Return the indices to operate on:
           - if any checkboxes are ticked → use ticks
           - else → use current selection
        """
        if self.checked:
            return sorted(self.checked)
        return sorted([int(s) for s in self.tree_ch.selection()])

    # ---- context commands ----
    def _ctx_add_to_fav(self):
        idxs = self._targets()
        if not idxs:
            messagebox.showinfo("Nothing selected", "Tick rows or use Ctrl/Shift to select channels.", parent=self)
            return
        # temporarily set selection to idxs so existing add_selected_to_favorite() works
        self.tree_ch.selection_set([str(i) for i in idxs])
        self.add_selected_to_favorite()

    def _ctx_move(self, direction: int):
        idxs = self._targets()
        if not idxs:
            messagebox.showinfo("Nothing selected", "Tick rows or use Ctrl/Shift to select channels.", parent=self)
            return
        if not confirm(self, "Move", f"Move {len(idxs)} channel(s) {'up' if direction<0 else 'down'}?"):
            return
        # set selection then reuse existing move function
        self.tree_ch.selection_set([str(i) for i in idxs])
        self.move_channels(direction)
        # reapply checks to new indices
        self.checked = set()

    def _ctx_delete(self):
        idxs = self._targets()
        if not idxs:
            messagebox.showinfo("Nothing selected", "Tick rows or use Ctrl/Shift to select channels.", parent=self)
            return
        if not confirm(self, "Delete", f"Delete {len(idxs)} channel(s)? This updates favorites accordingly."):
            return
        # set selection then reuse existing delete
        self.tree_ch.selection_set([str(i) for i in idxs])
        self.delete_selected_channels()
        self.checked = set()

    def _ctx_check_selected(self):
        for s in self.tree_ch.selection():
            i = int(s)
            self.checked.add(i)
            self.tree_ch.set(s, "Checked", "☑")

    def _ctx_uncheck_selected(self):
        for s in self.tree_ch.selection():
            i = int(s)
            if i in self.checked:
                self.checked.remove(i)
            self.tree_ch.set(s, "Checked", "☐")

    def _ctx_clear_checks(self):
        for iid in list(self.checked):
            if self.tree_ch.exists(str(iid)):
                self.tree_ch.set(str(iid), "Checked", "☐")
        self.checked.clear()

    def load_selected_channel_to_editor(self):
        sel = self.tree_ch.selection()
        if not sel: return
        i = int(sel[0]); ch = self.data.channels[i]
        self.ed_vars["Index"].set(str(i))
        self.ed_vars["Name"].set(ch.get("Name",""))
        self.ed_vars["Provider"].set(ch.get("Provider",""))
        self.ed_vars["TVType"].set(ch.get("TVType","TV"))
        self.ed_vars["VideoType"].set(ch.get("VideoType","H264"))
        self.ed_vars["VideoPID"].set(int(ch.get("VideoPID",0)))
        self.ed_vars["PcrPID"].set(int(ch.get("PcrPID",0)))
        self.ed_vars["PmtPID"].set(int(ch.get("PmtPID",0)))
        self.ed_vars["SID"].set(int(ch.get("SID",0)))
        self.ed_vars["TTXPID"].set(int(ch.get("TTXPID",0)))
        self.ed_vars["Lock"].set(bool(ch.get("Lock",0)))
        self.ed_vars["Skip"].set(bool(ch.get("Skip",0)))
        self.ed_vars["Hide"].set(bool(ch.get("Hide",0)))

        tpidx = int(ch.get("TPIndex",0))
        for pos, txt in enumerate(self.cmb_tp["values"]):
            if txt.startswith(f"{tpidx}: "):
                self.cmb_tp.current(pos); break

    def apply_channel_changes(self):
        sel = self.tree_ch.selection()
        if not sel:
            messagebox.showinfo("No selection", "Select one or more channels in the list.", parent=self)
            return
        try:
            for item_id in sel:
                i = int(item_id); ch = self.data.channels[i]
                ch["Name"] = self.ed_vars["Name"].get()
                ch["Provider"] = self.ed_vars["Provider"].get()
                ch["TVType"] = self.ed_vars["TVType"].get()
                ch["VideoType"] = self.ed_vars["VideoType"].get()
                ch["VideoPID"] = int(self.ed_vars["VideoPID"].get())
                ch["PcrPID"] = int(self.ed_vars["PcrPID"].get())
                ch["PmtPID"] = int(self.ed_vars["PmtPID"].get())
                ch["SID"] = int(self.ed_vars["SID"].get())
                ch["TTXPID"] = int(self.ed_vars["TTXPID"].get())
                ch["Lock"] = 1 if self.ed_vars["Lock"].get() else 0
                ch["Skip"] = 1 if self.ed_vars["Skip"].get() else 0
                ch["Hide"] = 1 if self.ed_vars["Hide"].get() else 0
                tp_combo_val = self.cmb_tp.get()
                if tp_combo_val:
                    tpidx = int(tp_combo_val.split(":",1)[0].strip())
                    ch["TPIndex"] = tpidx
            self.data.ensure_counts_and_indices()
            self.apply_channel_filter()
            self.status.set(f"Applied changes to {len(sel)} channel(s).")
        except Exception as e:
            messagebox.showerror("Apply Error", str(e), parent=self)

    def batch_flag(self, flag: str, value: bool):
        sel = self.tree_ch.selection()
        if not sel:
            messagebox.showinfo("No selection", "Select one or more channels.", parent=self); return
        for item_id in sel:
            i = int(item_id); self.data.channels[i][flag] = 1 if value else 0
        self.apply_channel_filter()
        self.status.set(f"Set {flag}={value} on {len(sel)} channel(s).")

    def batch_clear_flags(self):
        self.batch_flag("Lock", False); self.batch_flag("Skip", False); self.batch_flag("Hide", False)

    def move_channels(self, direction: int):
        sel = self._targets()
        if not sel:
            messagebox.showinfo("No selection", "Tick rows or use Ctrl/Shift to select channels.", parent=self)
            return
        if not confirm(self, "Move", f"Move {len(sel)} channel(s) {'up' if direction<0 else 'down'}?"):
            return
        self.data.reorder_channels(sel, direction)
        self.apply_channel_filter()
        new_sel = []
        for i in sel:
            ni = i + direction
            if 0 <= ni < len(self.data.channels):
                new_sel.append(str(ni))
        self.tree_ch.selection_set(new_sel)
        self.checked.clear()
        self.status.set("Reordered selected channels.")

    def _pick_favorite_group(self) -> Optional[int]:
        if not self.data or not self.data.favorites:
            messagebox.showinfo("No groups", "Create a favorite group first in the Favorites tab.", parent=self)
            return None
        dlg = FavoritePicker(self, self.data.favorites)
        self.wait_window(dlg)
        return dlg.result

    def add_selected_to_favorite(self):
        sel = self._targets()
        if not sel:
            messagebox.showinfo("No selection", "Tick rows or use Ctrl/Shift to select channels.", parent=self)
            return
        grp_idx = self._pick_favorite_group()
        if grp_idx is None: return
        if not (0 <= grp_idx < len(self.data.favorites)):
            messagebox.showerror("Invalid", "No such group.", parent=self); return

        fav = self.data.favorites[grp_idx]
        tv_list = set(fav.get("TVChs", [])); rd_list = set(fav.get("RadioChs", []))
        added = 0
        # keep order; avoid duplicates
        for i in sel:
            typ = self.data.channels[i].get("TVType")
            if typ == "TV":
                if i not in tv_list: tv_list.add(i)
            else:
                if i not in rd_list: rd_list.add(i)
        fav["TVChs"] = [x for x in fav.get("TVChs", []) if x in tv_list] + [x for x in sel if self.data.channels[x].get("TVType") == "TV" and x not in fav.get("TVChs", [])]
        fav["RadioChs"] = [x for x in fav.get("RadioChs", []) if x in rd_list] + [x for x in sel if self.data.channels[x].get("TVType") != "TV" and x not in fav.get("RadioChs", [])]

        self.checked.clear()
        self.refresh_favorites()
        self.status.set(f"Added {added} channel(s) to '{fav.get('Name','')}'.")

    # ---- favorites ops ----
    def refresh_favorites(self):
        """Refresh the Favorites tab (groups list + member lists)."""
        # groups list
        self.lst_fav.delete(0, "end")
        if not self.data:
            # nothing loaded: also clear member lists if they exist
            if hasattr(self, "lst_fav_tv"): 
                self.lst_fav_tv.delete(0, "end")
            if hasattr(self, "lst_fav_radio"):
                self.lst_fav_radio.delete(0, "end")
            return

        needle = self.var_fav_filter.get().strip().lower() if hasattr(self, "var_fav_filter") else ""
        for f in self.data.favorites:
            name = f.get("Name", "")
            if needle and needle not in name.lower():
                continue
            self.lst_fav.insert("end", f'{f.get("Index", 0)}: {name}')

        if self.lst_fav.size() > 0:
            # select first and show its members
            self.lst_fav.selection_clear(0, "end")
            self.lst_fav.selection_set(0)
            self.refresh_fav_members()
        else:
            # no groups -> clear member lists
            if hasattr(self, "lst_fav_tv"): 
                self.lst_fav_tv.delete(0, "end")
            if hasattr(self, "lst_fav_radio"):
                self.lst_fav_radio.delete(0, "end")

    def refresh_fav_members(self):
        if not self.data:
            return
        fav_i = self._current_fav_index()
        if fav_i is None:
            self.lst_fav_tv.delete(0, "end")
            self.lst_fav_radio.delete(0, "end")
            return

        fav = self.data.favorites[fav_i]
        tvs = fav.get("TVChs", [])
        rds = fav.get("RadioChs", [])

        def label_for(i: int) -> str:
            if 0 <= i < len(self.data.channels):
                return f"{self.data.channels[i].get('Name','<?>')} ({i})"
            return f"<??> ({i})"

        # fill lists
        self.lst_fav_tv.delete(0, "end")
        for i in tvs:
            self.lst_fav_tv.insert("end", label_for(i))

        self.lst_fav_radio.delete(0, "end")
        for i in rds:
            self.lst_fav_radio.insert("end", label_for(i))

        # --- double-click: fly to channel in Channels tab ---
        def _extract_index(item_text: str) -> Optional[int]:
            # expects "... (123)"
            try:
                return int(item_text.rsplit("(", 1)[-1].rstrip(")"))
            except Exception:
                return None

        def _on_dbl_tv(_evt=None):
            sel = self.lst_fav_tv.curselection()
            if not sel:
                return
            idx = _extract_index(self.lst_fav_tv.get(sel[0]))
            if idx is not None:
                self.jump_to_channel(idx)

        def _on_dbl_radio(_evt=None):
            sel = self.lst_fav_radio.curselection()
            if not sel:
                return
            idx = _extract_index(self.lst_fav_radio.get(sel[0]))
            if idx is not None:
                self.jump_to_channel(idx)

        # rebind each refresh (clears old closures)
        self.lst_fav_tv.unbind("<Double-Button-1>")
        self.lst_fav_radio.unbind("<Double-Button-1>")
        self.lst_fav_tv.bind("<Double-Button-1>", _on_dbl_tv)
        self.lst_fav_radio.bind("<Double-Button-1>", _on_dbl_radio)

    def new_fav_group(self):
        if not self.data: return
        name = simpledialog.askstring("New Group", "Group name:", parent=self)
        if not name: return
        self.data.favorites.append({"Index": len(self.data.favorites), "Name": name,
                                    "RadioChs": [], "TVChs": [], "Type":"fav"})
        self.data.ensure_counts_and_indices(); self.refresh_favorites()

    def rename_fav_group(self):
        sel = self.lst_fav.curselection()
        if not sel: return
        line = self.lst_fav.get(sel[0])
        try:
            real_idx = int(line.split(":",1)[0])
        except Exception:
            real_idx = sel[0]
        fav = self.data.favorites[real_idx]
        name = simpledialog.askstring("Rename Group", "New name:", parent=self, initialvalue=fav.get("Name",""))
        if not name: return
        fav["Name"] = name; self.refresh_favorites()

    def delete_fav_group(self):
        sel = self.lst_fav.curselection()
        if not sel: return
        if not confirm(self, "Delete", "Delete this favorite group?"): return
        line = self.lst_fav.get(sel[0])
        try:
            real_idx = int(line.split(":",1)[0])
        except Exception:
            real_idx = sel[0]
        del self.data.favorites[real_idx]
        self.data.ensure_counts_and_indices(); self.refresh_favorites()

    def add_selected_to_current_fav(self):
        selgrp = self.lst_fav.curselection()
        if not selgrp:
            messagebox.showinfo("No group", "Select a favorite group.", parent=self); return
        line = self.lst_fav.get(selgrp[0])
        try:
            grp_idx = int(line.split(":",1)[0])
        except Exception:
            grp_idx = selgrp[0]
        sel = [int(s) for s in self.tree_ch.selection()]
        if not sel:
            messagebox.showinfo("No selection", "Select channels in the Channels tab.", parent=self); return
        fav = self.data.favorites[grp_idx]
        tv_list = set(fav.get("TVChs", [])); rd_list = set(fav.get("RadioChs", []))
        added = 0
        for i in sel:
            typ = self.data.channels[i].get("TVType")
            if typ == "TV":
                if i not in tv_list: tv_list.add(i); added += 1
            else:
                if i not in rd_list: rd_list.add(i); added += 1
        fav["TVChs"] = tv_list if isinstance(tv_list, list) else list(tv_list)
        fav["RadioChs"] = rd_list if isinstance(rd_list, list) else list(rd_list)

        self.refresh_fav_members(); self.status.set(f"Added {added} channel(s).")

    def remove_channel_from_current_fav(self):
        selgrp = self.lst_fav.curselection()
        if not selgrp: return
        line = self.lst_fav.get(selgrp[0])
        try:
            grp_idx = int(line.split(":",1)[0])
        except Exception:
            grp_idx = selgrp[0]
        fav = self.data.favorites[grp_idx]
        idx = simpledialog.askinteger("Remove Member", "Enter channel Index to remove:", parent=self, minvalue=0)
        if idx is None: return
        fav["TVChs"] = [i for i in fav.get("TVChs", []) if i != idx]
        fav["RadioChs"] = [i for i in fav.get("RadioChs", []) if i != idx]
        self.refresh_fav_members()

    def _set_text(self, widget: tk.Text, text: str):
        widget.config(state="normal"); widget.delete("1.0", "end"); widget.insert("1.0", text); widget.config(state="disabled")

    # ---- tp/sat inline edit + filters ----
    def refresh_transponders(self):
        self.tree_tp.delete(*self.tree_tp.get_children())
        if not self.data: return
        q = self.var_tp_search.get().strip().lower() if hasattr(self, "var_tp_search") else ""
        for t in self.data.transponders:
            vals = (t.get("Index",0), t.get("SatIndex",-1), t.get("Freq",""), t.get("Pol",""),
                    t.get("SR",""), t.get("FEC",""), t.get("plsNumber",0), t.get("msIsid",0), t.get("msTp",0))
            text_blob = " ".join(map(str, vals)).lower()
            if q and q not in text_blob:
                continue
            self.tree_tp.insert("", "end", iid=str(t.get("Index",0)), values=vals)

    def tp_begin_edit(self, event):
        self._begin_cell_edit(self.tree_tp, event, self.tp_commit_edit)

    def tp_commit_edit(self, row_id: str, col: str, new_value: str):
        if not self.data: return
        idx = int(row_id); t = self.data.transponders[idx]
        if col in ("Freq","SR","plsNumber","msIsid","msTp"):
            try: t[col] = int(new_value)
            except ValueError: t[col] = new_value
        elif col == "SatIndex":
            try:
                si = int(new_value)
                if 0 <= si < len(self.data.satellites): t[col] = si
            except ValueError:
                pass
        else:
            t[col] = new_value
        self.refresh_transponders(); self.refresh_channels()

    def refresh_satellites(self):
        self.tree_sat.delete(*self.tree_sat.get_children())
        if not self.data: return
        q = self.var_sat_search.get().strip().lower() if hasattr(self, "var_sat_search") else ""
        for s in self.data.satellites:
            vals = (s.get("Index",0), s.get("Name",""), s.get("Angle",""), s.get("Band",""))
            text_blob = " ".join(map(lambda x: str(x).lower(), vals))
            if q and q not in text_blob:
                continue
            self.tree_sat.insert("", "end", iid=str(s.get("Index",0)), values=vals)

    def sat_begin_edit(self, event):
        self._begin_cell_edit(self.tree_sat, event, self.sat_commit_edit)

    def sat_commit_edit(self, row_id: str, col: str, new_value: str):
        if not self.data: return
        idx = int(row_id); s = self.data.satellites[idx]
        if col in ("Angle",):
            try: s[col] = int(new_value)
            except ValueError: s[col] = new_value
        else:
            s[col] = new_value
        self.refresh_satellites(); self.refresh_channels()

    def _begin_cell_edit(self, tree: ttk.Treeview, event, commit_callback):
        region = tree.identify("region", event.x, event.y)
        if region != "cell": return
        row_id = tree.identify_row(event.y); col_id = tree.identify_column(event.x)
        if not row_id or not col_id: return
        x, y, w, h = tree.bbox(row_id, col_id)
        col = tree.heading(col_id)["text"]; old = tree.set(row_id, col)
        entry = ttk.Entry(tree); entry.place(x=x, y=y, width=w, height=h)
        entry.insert(0, old); entry.focus_set()
        def on_commit(e=None):
            nv = entry.get(); entry.destroy(); commit_callback(row_id, col, nv)
        entry.bind("<Return>", on_commit)
        entry.bind("<FocusOut>", on_commit)
        entry.bind("<Escape>", lambda e: entry.destroy())

    # ---- summary & validate ----
    def refresh_summary(self):
        if not self.data:
            self._set_text(self.lbl_summary, "No data loaded."); return
        d = self.data
        tp_by_sat = {}
        for t in d.transponders:
            tp_by_sat.setdefault(t.get("SatIndex",-1), 0)
            tp_by_sat[t.get("SatIndex",-1)] += 1
        lines = []
        lines.append(f"File: {self.filepath or '(unsaved)'}")
        lines.append(f"Version: {d.meta.get('Ver',1)}")
        lines.append(f"Satellites: {len(d.satellites)}")
        for s in d.satellites:
            lines.append(f"  - [{s.get('Index')}] {s.get('Name')} (Angle {s.get('Angle')}, {s.get('Band')}) – TPs: {tp_by_sat.get(s.get('Index'),0)}")
        lines.append(f"Transponders: {len(d.transponders)}")
        lines.append(f"Channels: {len(d.channels)} (TV {d.meta.get('ChTV')}, Radio {d.meta.get('CHRadio')})")
        lines.append(f"Favorites: {len(d.favorites)}")
        self._set_text(self.lbl_summary, "\n".join(lines))

    def recalc_validate(self):
        if not self.data: return
        self.data.ensure_counts_and_indices()
        bad_tp = []
        for i, ch in enumerate(self.data.channels):
            idx = ch.get("TPIndex", -1)
            if not (0 <= idx < len(self.data.transponders)): bad_tp.append(i)
        bad_fav = []
        for f in self.data.favorites:
            for i in f.get("TVChs", []):
                if not (0 <= i < len(self.data.channels)): bad_fav.append(("TV", f.get("Name",""), i))
            for i in f.get("RadioChs", []):
                if not (0 <= i < len(self.data.channels)): bad_fav.append(("Radio", f.get("Name",""), i))
        msg = "Validation complete.\n" + f"- Bad TPIndex refs: {len(bad_tp)}\n- Bad favorite entries: {len(bad_fav)}"
        messagebox.showinfo("Validate", msg, parent=self)
        self.refresh_summary(); self.apply_channel_filter()


    # ---- About & Instructions ----
    def show_about(self):
        # Create About window
        about = tk.Toplevel(self)
        about.title("About")
        about.resizable(False, False)
        about.transient(self)
        about.grab_set()

        frame = ttk.Frame(about, padding=15)
        frame.pack(fill="both", expand=True)

        # App title
        ttk.Label(
            frame,
            text=f"{APP_NAME} v{APP_VERSION}",
            font=("Segoe UI", 12, "bold")
        ).pack(pady=(0, 5))

        # Text content
        text = (
            "Edit .chl channel lists (sat/tp/ch/fav).\n"
            "Safe-save automatically creates a .bak backup beside your file.\n\n"
            "Donations (optional): paypal.me/nikkpap\n\n"
            "Community: free for all - open source\n\n"
            "Developed by ALU DEV TEAM\n© 2025 nikkpap"
        )
        ttk.Label(frame, text=text, justify="center").pack(pady=(0, 10))

        # Icon UNDER the text
        try:
            icon = tk.PhotoImage(data=ABOUT_ICON_B64, format="png")
            ttk.Label(frame, image=icon).pack(pady=(0, 10))
            # keep a ref so it's not GC'd
            about._icon_ref = icon
        except Exception:
            pass

        # OK button
        ttk.Button(frame, text="OK", command=about.destroy).pack(pady=10)

        # center over parent
        about.update_idletasks()
        px = self.winfo_rootx() + (self.winfo_width() // 2) - (about.winfo_width() // 2)
        py = self.winfo_rooty() + (self.winfo_height() // 2) - (about.winfo_height() // 2)
        about.geometry(f"+{px}+{py}")

    def show_instructions(self):
        """Display a short instructions/help window."""
        instr = tk.Toplevel(self)
        instr.title("Instructions")
        instr.resizable(False, False)
        instr.transient(self)
        instr.grab_set()

        frame = ttk.Frame(instr, padding=15)
        frame.pack(fill="both", expand=True)

        text = (
            "📖 Quick Instructions\n\n"
            "• Use File → Open to load a .chl, .sdx or satellites.xml file.\n"
            "• Channels Tab: filter, edit, reorder or delete channels.\n"
            "• Favorites Tab: organize channels into favorite groups.\n"
            "• Transponders Tab: view/edit/delete transponders.\n"
            "• Satellites Tab: view/edit/delete satellites.\n"
            "• Always use File → Save to update the file (backup is made automatically).\n\n"
            "Tip: Right-click in lists for context actions!"
        )
        ttk.Label(frame, text=text, justify="left").pack()

        ttk.Button(frame, text="OK", command=instr.destroy).pack(pady=10)

        # Center over parent
        instr.update_idletasks()
        px = self.winfo_rootx() + (self.winfo_width() // 2) - (instr.winfo_width() // 2)
        py = self.winfo_rooty() + (self.winfo_height() // 2) - (instr.winfo_height() // 2)
        instr.geometry(f"+{px}+{py}")

# --------------- Main ---------------
def main():
    root = tk.Tk()
    root.withdraw()  # hide root while splash is shown

    splash = show_splash(root, SPLASH_LOGO_B64, duration_ms=2500)
    if splash is not None:
        root.wait_window(splash)  # <-- wait until splash closes

    root.destroy()               # <-- now it's safe to destroy root

    app = ChlApp()               # create your real app window
    app.mainloop()


if __name__ == "__main__":
    main()
